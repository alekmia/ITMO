-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/hw6#readme</a>
@package hw6
@version 0.1.0.0


-- | This module defines <a>ListZipper</a> datatype. Feel free to define
--   additional helper functions to work with this datatype in this module.
module Data.ListZipper

-- | Stores two arrays and an element between them for easy access
data ListZipper a
LZ :: [a] -> a -> [a] -> ListZipper a

-- | Shift the LZ left or right, making it store a new element
lLeft :: ListZipper a -> ListZipper a

-- | Shift the LZ left or right, making it store a new element
lRight :: ListZipper a -> ListZipper a

-- | Change the stored element
lWrite :: a -> ListZipper a -> ListZipper a

-- | Convert ListZipper to an array of elements
toList :: ListZipper a -> Int -> [a]

-- | Generate a ListZipper from an element and a two functions - one that
--   makes the first array, one that makes the second one
lGenerator :: (a -> a) -> (a -> a) -> a -> ListZipper a
instance GHC.Base.Functor Data.ListZipper.ListZipper
instance Control.Comonad.Comonad Data.ListZipper.ListZipper


-- | This module defines <a>Grid</a> datatype. Feel free to define
--   additional helper functions to work with this datatype in this module.
module Data.Grid

-- | Grid. Has a method, that returns a ListZipper (LZ) of LZ's
newtype Grid a
Grid :: ListZipper (ListZipper a) -> Grid a
[unGrid] :: Grid a -> ListZipper (ListZipper a)

-- | Returns a grid, that can be achieved from the input grid, by moving
--   the 'current element' up or down, which is achived by shifting the
--   external LZ left or right.
gUp :: Grid a -> Grid a

-- | Returns a grid, that can be achieved from the input grid, by moving
--   the 'current element' up or down, which is achived by shifting the
--   external LZ left or right.
gDown :: Grid a -> Grid a

-- | Returns a grid, that can be achieved from the input grid, by moving
--   the 'current element' left or right, which is achieved by shifting all
--   of the internal LZs left or right
gLeft :: Grid a -> Grid a

-- | Returns a grid, that can be achieved from the input grid, by moving
--   the 'current element' left or right, which is achieved by shifting all
--   of the internal LZs left or right
gRight :: Grid a -> Grid a

-- | Change the 'current element'
gWrite :: a -> Grid a -> Grid a

-- | Generate a LZ of all horizontal or vertical 'current element' moves
gHorizontal :: Grid a -> ListZipper (Grid a)

-- | Generate a LZ of all horizontal or vertical 'current element' moves
gVertical :: Grid a -> ListZipper (Grid a)
instance GHC.Base.Functor Data.Grid.Grid
instance Control.Comonad.Comonad Data.Grid.Grid

module HW6.T1

-- | TArray of buckets
type BucketsArray stm k v = TArray stm Int (Bucket k v)

-- | CHT. Can call needed methods to get its BucketsArray or size
data CHT stm k v
CHT :: TVar stm (BucketsArray stm k v) -> TVar stm Int -> CHT stm k v
[chtBuckets] :: CHT stm k v -> TVar stm (BucketsArray stm k v)
[chtSize] :: CHT stm k v -> TVar stm Int

-- | Create a new CHT with capacity of initCapacity
newCHT :: MonadConc m => m (CHT (STM m) k v)

-- | Gets value from CHT by value. If found - returns 'Just v', else -
--   <a>Nothing</a>
getCHT :: (MonadConc m, Eq k, Hashable k) => k -> CHT (STM m) k v -> m (Maybe v)

-- | Adds an element to our CHT. Calculates the index in BucketsArrat using
--   'hash k % capacity' and adds it to the corresponding bucket
putCHT :: (MonadConc m, Eq k, Hashable k) => k -> v -> CHT (STM m) k v -> m ()

-- | Returns size of our CHT - number of elements
sizeCHT :: MonadConc m => CHT (STM m) k v -> m Int

-- | Capacity of our CHT at the beginning
initCapacity :: Int

-- | Percentage of capacity, at which we should resize our CHT
loadFactor :: Double

module HW6.T2

-- | TSet. Is an array of Symbols
type TSet = [Symbol]

-- | Check if element is in TSet
type family Contains (name :: Symbol) (set :: TSet) :: Bool

-- | Add element to TSet
type family Add (name :: Symbol) (set :: TSet) :: TSet

-- | Delete element from TSet
type family Delete (name :: Symbol) (set :: TSet) :: TSet

module HW6.T3

-- | Simulation parameters - probability of infection (0 &lt; p &lt; 1),
--   incubation period, illness duration and immunity duration
data Config
Config :: Double -> Int -> Int -> Int -> Config
[probability] :: Config -> Double
[incubationPeriod] :: Config -> Int
[illnessDuration] :: Config -> Int
[immunityDuration] :: Config -> Int

-- | Cell. Can get its state and its StdGen
data Cell
Cell :: CellState -> StdGen -> Cell
[cellState] :: Cell -> CellState
[cellRand] :: Cell -> StdGen

-- | States in which the cell can be. Some have an Int parameter - days
--   left of said state
data CellState
Healthy :: CellState
Infected :: Int -> CellState
Ill :: Int -> CellState
Immune :: Int -> CellState

-- | A grid of cells
type Comonad19Grid = Grid Cell

-- | Creates a list of grids using the given configuration, starting stdGen
--   and amount of steps. Each element of this list represents one
--   infection simulation step.
simulate :: Config -> StdGen -> Int -> [Comonad19Grid]

-- | Convert Grid to String for easy printing. Also takes an int - length
--   of grid side
showGrid :: Int -> Comonad19Grid -> String
instance GHC.Show.Show HW6.T3.Config
instance GHC.Show.Show HW6.T3.CellState
