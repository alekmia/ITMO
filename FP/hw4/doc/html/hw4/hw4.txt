-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/hw4#readme</a>
@package hw4
@version 0.1.0.0


-- | This module contains the types from hw3 that are also needed for hw4.
module HW4.Types
data Annotated e a
(:#) :: a -> e -> Annotated e a
data Except e a
Error :: e -> Except e a
Success :: a -> Except e a
data Expr
Val :: Double -> Expr
Op :: Prim Expr -> Expr
data Prim a
Add :: a -> a -> Prim a
Sub :: a -> a -> Prim a
Mul :: a -> a -> Prim a
Div :: a -> a -> Prim a
Abs :: a -> Prim a
Sgn :: a -> Prim a
data State s a
S :: (s -> Annotated s a) -> State s a
[runS] :: State s a -> s -> Annotated s a
instance (GHC.Show.Show e, GHC.Show.Show a) => GHC.Show.Show (HW4.Types.Except e a)
instance (GHC.Show.Show a, GHC.Show.Show e) => GHC.Show.Show (HW4.Types.Annotated e a)
instance GHC.Show.Show a => GHC.Show.Show (HW4.Types.Prim a)
instance GHC.Show.Show HW4.Types.Expr
instance GHC.Num.Num HW4.Types.Expr
instance GHC.Real.Fractional HW4.Types.Expr

module HW4.T1
data EvaluationError
DivideByZero :: EvaluationError
data ExceptState e s a
ES :: (s -> Except e (Annotated s a)) -> ExceptState e s a
[runES] :: ExceptState e s a -> s -> Except e (Annotated s a)

-- | Maps the excepted state
mapExceptState :: (a -> b) -> ExceptState e s a -> ExceptState e s b

-- | Wraps the excepted state
wrapExceptState :: a -> ExceptState e s a

-- | joins the Excepted States
joinExceptState :: ExceptState e s (ExceptState e s a) -> ExceptState e s a

-- | modifies the excepted state
modifyExceptState :: (s -> s) -> ExceptState e s ()

-- | creates except state that always throw error
throwExceptState :: e -> ExceptState e s a

-- | evaluates expression
eval :: Expr -> ExceptState EvaluationError [Prim Double] Double
instance GHC.Show.Show HW4.T1.EvaluationError
instance GHC.Base.Functor (HW4.T1.ExceptState e s)
instance GHC.Base.Applicative (HW4.T1.ExceptState e s)
instance GHC.Base.Monad (HW4.T1.ExceptState e s)

module HW4.T2
data ParseError
ErrorAtPos :: Natural -> ParseError

-- | Applies given parser on given string and returns result
runP :: Parser a -> String -> Except ParseError a

-- | Parser that consumes one char. Was given in HW files as an example
pChar :: Parser Char

-- | Parser that always throws an error
parseError :: Parser a

-- | Takes in a string and parses it. Returns the result which is Either
--   <a>Error</a> and tells the position of failure Either <a>Success</a>
--   and the parsed expression.
--   
--   Production rules used as the grammar:
--   
--   parserE -&gt; parserT parserE'
--   
--   parserE' -&gt; + parserT parserE' | - parserT parserE' | epsilon
--   
--   parserT -&gt; parserF parserT'
--   
--   parserT' -&gt; * parserF parserT' | / parserF parserT' | epsilon
--   
--   parserF -&gt; ( parserE ) | int
parseExpr :: String -> Except ParseError Expr
instance GHC.Show.Show HW4.T2.ParseError
instance GHC.Base.Monad HW4.T2.Parser
instance GHC.Base.Applicative HW4.T2.Parser
instance GHC.Base.Functor HW4.T2.Parser
instance GHC.Base.Alternative HW4.T2.Parser
instance GHC.Base.MonadPlus HW4.T2.Parser
